package com.me.duotwighlight;

import java.util.Iterator;

import com.badlogic.gdx.ApplicationListener;
import com.badlogic.gdx.Gdx;
import com.badlogic.gdx.Input.Keys;
import com.badlogic.gdx.audio.Music;
import com.badlogic.gdx.audio.Sound;
import com.badlogic.gdx.graphics.GL20;
import com.badlogic.gdx.graphics.OrthographicCamera;
import com.badlogic.gdx.graphics.Texture;
import com.badlogic.gdx.graphics.Texture.TextureFilter;
import com.badlogic.gdx.graphics.g2d.Sprite;
import com.badlogic.gdx.graphics.g2d.SpriteBatch;
import com.badlogic.gdx.graphics.g2d.TextureRegion;
import com.badlogic.gdx.math.MathUtils;
import com.badlogic.gdx.math.Rectangle;
import com.badlogic.gdx.math.Vector3;
import com.badlogic.gdx.utils.Array;
import com.badlogic.gdx.utils.TimeUtils;

public class DuoTwighlight implements ApplicationListener {
	
	Texture dropImage;
	Texture bucketImage;
	Texture backgroundImage;
   	Sound dropSound;
   	Music rainMusic;
   	SpriteBatch batch;
   	OrthographicCamera camera;
   	Rectangle bucket;
   	Rectangle bucket2;
   	Array<Rectangle> raindrops;
   	long lastDropTime;
   	Texture grassImage;
   	Rectangle grass;
   	

	
	@Override
	public void create() {		
		// load the images for the droplet and the bucket, 64x64 pixels each
	      backgroundImage = new Texture(Gdx.files.internal("resources/images/bkg.png"));
	      dropImage = new Texture(Gdx.files.internal("resources/droplet.png"));
	      bucketImage = new Texture(Gdx.files.internal("resources/images/bueno2.png"));
	      grassImage = new Texture(Gdx.files.internal("resources/images/piso.png"));
	  

	      // load the drop sound effect and the rain background "music"
	      dropSound = Gdx.audio.newSound(Gdx.files.internal("resources/drop.wav"));
	      rainMusic = Gdx.audio.newMusic(Gdx.files.internal("resources/rain.mp3"));

	      // start the playback of the background music immediately
	      rainMusic.setLooping(true);
	      rainMusic.play();

	      // create the camera and the SpriteBatch
	      camera = new OrthographicCamera();
	      camera.setToOrtho(false, 800, 480);
	      batch = new SpriteBatch();

	      // create a Rectangle to logically represent the bucket
	      bucket = new Rectangle();
	      bucket.x = 800 / 2 - 64 / 2; // center the bucket horizontally
	      bucket.y = 230; // bottom left corner of the bucket is 20 pixels above the bottom screen edge
	      bucket.width = 64;
	      bucket.height = 64;
	      
	      //bucket2
	      bucket2 = new Rectangle();
	      bucket2.x = 800 /2 -64 / 2;
	      bucket2.y = 180; 
	      bucket.width = 64;
	      bucket.height = 64;
	      
	      //create a grass Rectangle to represent the grass
	      grass = new Rectangle();
	      grass.x = 0;
	      grass.y = camera.viewportHeight/2;
	      
	      // create the raindrops array and spawn the first raindrop
	      raindrops = new Array<Rectangle>();
	      spawnRaindrop();
	}

	@Override
	public void dispose() {
	      // dispose of all the native resources
	      dropImage.dispose();
	      bucketImage.dispose();
	      backgroundImage.dispose();
	      dropSound.dispose();
	      rainMusic.dispose();
	      batch.dispose();
	}

	@Override
	public void render() {		
		// clear the screen with a dark blue color. The
	      // arguments to glClearColor are the red, green
	      // blue and alpha component in the range [0,1]
	      // of the color to be used to clear the screen.
	      Gdx.gl.glClearColor(0, 0, 0.2f, 1);
	      Gdx.gl.glClear(GL20.GL_COLOR_BUFFER_BIT);

	      // tell the camera to update its matrices.
	      camera.update();

	      // tell the SpriteBatch to render in the
	      // coordinate system specified by the camera.
	      batch.setProjectionMatrix(camera.combined);

	      // begin a new batch and draw the bucket and
	      // all drops
	      batch.begin();
	      batch.draw(backgroundImage, 0, 0, camera.viewportWidth, camera.viewportHeight);
	      batch.draw(bucketImage, bucket.x, bucket.y);
	      batch.draw(bucketImage, bucket2.x, bucket2.y);
	      batch.draw(grassImage, grass.x, grass.y, camera.viewportWidth, 40);
	      
	      for(Rectangle raindrop: raindrops) {
	         batch.draw(dropImage, raindrop.x, raindrop.y);
	      }
	      batch.end();

	      // process user input
	      if(Gdx.input.isTouched()) {
	         Vector3 touchPos = new Vector3();
	         touchPos.set(Gdx.input.getX(), Gdx.input.getY(), 0);
	         camera.unproject(touchPos);
	         bucket.x = touchPos.x - 64 / 2;
	      }
	      if(Gdx.input.isKeyPressed(Keys.LEFT)) bucket.x -= 200 * Gdx.graphics.getDeltaTime();
	      if(Gdx.input.isKeyPressed(Keys.RIGHT)) bucket.x += 200 * Gdx.graphics.getDeltaTime();

	      // make sure the bucket stays within the screen bounds
	      if(bucket.x < 0) bucket.x = 0;
	      if(bucket.x > 800 - 64) bucket.x = 800 - 64;

	      // check if we need to create a new raindrop
	      if(TimeUtils.nanoTime() - lastDropTime > 1000000000) spawnRaindrop();

	      // move the raindrops, remove any that are beneath the bottom edge of
	      // the screen or that hit the bucket. In the later case we play back
	      // a sound effect as well.
	      Iterator<Rectangle> iter = raindrops.iterator();
	      while(iter.hasNext()) {
	         Rectangle raindrop = iter.next();
	         raindrop.y -= 200 * Gdx.graphics.getDeltaTime();
	         if(raindrop.y + 64 < 0) iter.remove();
	         if(raindrop.overlaps(bucket)) {
	            dropSound.play();
	            iter.remove();
	         }
	      }
	}
	
	private void spawnRaindrop() {
	      Rectangle raindrop = new Rectangle();
	      raindrop.x = MathUtils.random(0, 800-64);
	      raindrop.y = 480;
	      raindrop.width = 64;
	      raindrop.height = 64;
	      raindrops.add(raindrop);
	      lastDropTime = TimeUtils.nanoTime();
	   }

	@Override
	public void resize(int width, int height) {
	}

	@Override
	public void pause() {
	}

	@Override
	public void resume() {
	}
}
