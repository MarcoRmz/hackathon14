package com.me.duotwighlight;

import java.util.Iterator;

import com.badlogic.gdx.ApplicationListener;
import com.badlogic.gdx.Gdx;
import com.badlogic.gdx.Input.Keys;
import com.badlogic.gdx.audio.Music;
import com.badlogic.gdx.audio.Sound;
import com.badlogic.gdx.graphics.GL20;
import com.badlogic.gdx.graphics.OrthographicCamera;
import com.badlogic.gdx.graphics.Texture;
import com.badlogic.gdx.graphics.Texture.TextureFilter;
import com.badlogic.gdx.graphics.g2d.Animation;
import com.badlogic.gdx.graphics.g2d.Sprite;
import com.badlogic.gdx.graphics.g2d.SpriteBatch;
import com.badlogic.gdx.graphics.g2d.TextureAtlas;
import com.badlogic.gdx.graphics.g2d.TextureRegion;
import com.badlogic.gdx.math.MathUtils;
import com.badlogic.gdx.math.Rectangle;
import com.badlogic.gdx.math.Vector3;
import com.badlogic.gdx.utils.Array;
import com.badlogic.gdx.utils.TimeUtils;
import com.me.duotwighlight.MainMenuScreen;
import com.badlogic.gdx.Game;
import com.badlogic.gdx.Screen;



public class DuoTwighlight implements ApplicationListener {
	
	
	@Override
	public void create() {		

		setScreen(new MainMenuScreen());
	}

	@Override
	public void dispose() {
		super.dispose();
		
	}
	


	@Override
	public void render() {		
		// clear the screen with a dark blue color. The
	      // arguments to glClearColor are the red, green
	      // blue and alpha component in the range [0,1]
	      // of the color to be used to clear the screen.
	      Gdx.gl.glClearColor(0, 0, 0.2f, 1);
	      Gdx.gl.glClear(GL20.GL_COLOR_BUFFER_BIT);

	      // tell the camera to update its matrices.
	      camera.update();

	      // tell the SpriteBatch to render in the
	      // coordinate system specified by the camera.
	      batch.setProjectionMatrix(camera.combined);

	      // begin a new batch and draw the boy and
	      // all drops
	      batch.begin();
	      batch.draw(backgroundImage, 0, 0, camera.viewportWidth, camera.viewportHeight);
	      batch.draw(grassImage, grass.x, grass.y, camera.viewportWidth, 50);
	      batch.draw(grassImage, grass2.x, grass2.y, camera.viewportWidth, 50);
	      batch.draw(boyImage, boy.x, boy.y);
	      batch.draw(boyImageInv, boy2.x, boy2.y);
	      //batch.draw(boyImage, boy2.x, boy2.y);
	      
	      //bobFrame = walkLeftAnimation.getKeyFrame(stateTime, true);
	      for(Rectangle soccerball: soccerballs) {
	    	  	batch.draw(soccerImage, soccerball.x, soccerball.y, 30, 30);
	    	  	 

	   	     // batch.draw(bobFrame, soccerball.x, soccerball.y, 30, 30);
	   	      
	      }

	      for(Rectangle boomerang: boomerangs) {
	    	  	batch.draw(boomerangImage, boomerang.x, boomerang.y, 30, 30);
	      }

	      batch.end();

	      // process user input
	      if(Gdx.input.isTouched()) {
//	         Vector3 touchPos = new Vector3();
//	         touchPos.set(Gdx.input.getX(), Gdx.input.getY(), 0);
//	         camera.unproject(touchPos);
//	         boy.x = touchPos.x - 50 / 2;
	    	 touched = true;
	      }
	      
	      
	      // jump of the boy
	      if(touched){
	    	  boy.y = boy.y + velocidad;
	    	  boy2.y = boy2.y - velocidad;
	    	  counterGravity++;
	    	  if(counterGravity>=2.3321){
	    		  velocidad -= 1;
	    		  counterGravity=0.00;
	    	  }
	      }
	      if(boy.y < 235){
	    	  boy.y = 235;
	    	  touched = false;
	    	  velocidad = 8;
	      }
	      if(boy2.y > 160){
	    	  boy2.y = 160;
	    	  touched = false;
	    	  velocidad = 8;
	      }
	      	      
	      //grass movement
	      grass.x -= 200 * Gdx.graphics.getDeltaTime();
	      grass2.x -= 200 * Gdx.graphics.getDeltaTime();
	      
	      if(grass.getX()<0-camera.viewportWidth){
	    	  grass.x = 800;
	      }
	      if(grass2.getX()<0-camera.viewportWidth){
	    	  grass2.x = 800;
	      }

	      // check if we need to create a new soccerball
	      if(TimeUtils.nanoTime() - lastSoccer > 1000000000){
	    	  spawnSoccerBall();
	      }
	      //check if we need to create a new boomerang
	      if(TimeUtils.nanoTime() - lastBoomerang > 1500000000){
	    	  spawnBoomerangs();
	      }

	      // move the soccerballs, remove any that are beneath the bottom edge of
	      // the screen or that hit the boy. In the later case we play back
	      // a sound effect as well.
	      Iterator<Rectangle> iter = soccerballs.iterator();
	      while(iter.hasNext()) {
	         Rectangle soccerball = iter.next();
	         soccerball.x -= 200 * Gdx.graphics.getDeltaTime();
	         if(soccerball.x + 30 < 0) iter.remove();
	         if(soccerball.overlaps(boy)) {
	            dropSound.play();
	            iter.remove();
	         }
	      }

	      // move the boomerangs, remove any that are beneath the bottom edge of
	      // the screen or that hit the boy. In the later case we play back
	      // a sound effect as well.
	      Iterator<Rectangle> boomIter = boomerangs.iterator();
	      while(boomIter.hasNext()) {
	         Rectangle boomerang = boomIter.next();
	         boomerang.x -= 200 * Gdx.graphics.getDeltaTime();
	         if(boomerang.x + 30 < 0) boomIter.remove();
	         if(boomerang.overlaps(boy)) {
	            dropSound.play();
	            boomIter.remove();
	         }
	      }
	}
	
	private void spawnSoccerBall() {
	      Rectangle soccerball = new Rectangle();
	      soccerball.x = 800;
	      //soccerball.y = MathUtils.random(220, 480-30);
	      soccerball.y = 236;
	      soccerball.width = 30;
	      soccerball.height = 30;
	      soccerballs.add(soccerball);
	      lastSoccer = TimeUtils.nanoTime();
	}

	private void spawnBoomerangs() {
	      Rectangle boomerang = new Rectangle();
	      boomerang.x = 800;
	      boomerang.y = 340;
	      boomerang.width = 30;
	      boomerang.height = 30;
	      boomerangs.add(boomerang);
	      lastBoomerang = TimeUtils.nanoTime();
	}	

	@Override
	public void resize(int width, int height) {
	}

	@Override
	public void pause() {
	}

	@Override
	public void resume() {
	}
}
